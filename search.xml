<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Map中的compute、computeIfAbsent和computeIfPresent的使用和区别</title>
      <link href="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/"/>
      <url>/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="Map中的compute、computeIfAbsent和computeIfPresent的使用和区别"><a href="#Map中的compute、computeIfAbsent和computeIfPresent的使用和区别" class="headerlink" title="Map中的compute、computeIfAbsent和computeIfPresent的使用和区别"></a>Map中的compute、computeIfAbsent和computeIfPresent的使用和区别</h2><blockquote><p>先准备一个简单的map数据吧</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, String&gt; testMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">testMap.put(<span class="number">1L</span>, <span class="string">"张三"</span>);</span><br><span class="line">testMap.put(<span class="number">2L</span>, <span class="string">"李四"</span>);</span><br><span class="line">testMap.put(<span class="number">3L</span>, <span class="string">"王五"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="1、computeIfAbsent"><a href="#1、computeIfAbsent" class="headerlink" title="1、computeIfAbsent"></a>1、computeIfAbsent</h3><blockquote><p>简单来说这个方法就是根据第一个参数key，去查询map，==只有当返回值为null即Map中查询不到对应的数据时，向Map中添加一条数据==</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试，没有新增</span></span><br><span class="line">testMap.computeIfAbsent(<span class="number">4L</span>, aLong -&gt; <span class="string">"computeIfAbsent"</span>);</span><br><span class="line"><span class="comment">//有返回值，不做任何操作</span></span><br><span class="line">testMap.computeIfAbsent(<span class="number">3L</span>, aLong -&gt; <span class="string">"computeIfAbsent2"</span>);</span><br></pre></td></tr></tbody></table></figure><p>操作之前的截图</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/cc4172757996496ab58fa316ef2ad212.png" class="" title="在这里插入图片描述"><p>没有的新增</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/8653ca3461934f719c18e433d4f650d1.png" class="" title="在这里插入图片描述"><p>有的不做操作</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/66775c91dffb47f183d295dfeb63090d.png" class="" title="在这里插入图片描述"><h3 id="2、computeIfPresent"><a href="#2、computeIfPresent" class="headerlink" title="2、computeIfPresent"></a>2、computeIfPresent</h3><blockquote><p>简单来说这个方法就是根据第一个参数key，去查询map，如果==查询到了就更新对应的值，如果查询不到，不做任何操作==</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map中有就更新，没有不做操作</span></span><br><span class="line">testMap.computeIfPresent(<span class="number">2L</span>, (aLong, s) -&gt; <span class="string">"computeIfPresent"</span>);</span><br><span class="line"><span class="comment">//Map中没有不做操作</span></span><br><span class="line">testMap.computeIfPresent(<span class="number">5L</span>, (aLong, s) -&gt; <span class="string">"computeIfPresent2"</span>);</span><br></pre></td></tr></tbody></table></figure><p>有就更新</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/c9aaaa52559d4dd4b1f7e6f82e5f62eb.png" class="" title="在这里插入图片描述"><p>没有不做操作</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/b25830c2a5014b4e93188da517f6ae46.png" class="" title="在这里插入图片描述"><h3 id="3、compute"><a href="#3、compute" class="headerlink" title="3、compute"></a>3、compute</h3><blockquote><p>简单来说这个方法就是根据第一个参数key，去查询map，==无论是否查询到，都会执行第二个方法体，没有就新增，有就更新值==</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testMap.compute(<span class="number">1L</span>, (aLong, s) -&gt; <span class="string">"compute"</span>);</span><br><span class="line">testMap.compute(<span class="number">6L</span>, (aLong, s) -&gt; <span class="string">"compute2"</span>);</span><br></pre></td></tr></tbody></table></figure><p>有就更新</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/6e9a4b4754094ac4a1bdcf3b31293512.png" class="" title="在这里插入图片描述"><p>没有就新增</p><img src="/2024/03/15/map-zhong-de-compute-computeifabsent-he-computeifpresent-de-shi-yong-he-qu-bie/038a64f019b84ff496fbce023023bed9.png" class="" title="在这里插入图片描述"><h3 id="4、完整代码"><a href="#4、完整代码" class="headerlink" title="4、完整代码"></a>4、完整代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, String&gt; testMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">testMap.put(<span class="number">1L</span>, <span class="string">"张三"</span>);</span><br><span class="line">testMap.put(<span class="number">2L</span>, <span class="string">"李四"</span>);</span><br><span class="line">testMap.put(<span class="number">3L</span>, <span class="string">"王五"</span>);</span><br><span class="line"><span class="comment">//测试，没有新增</span></span><br><span class="line">testMap.computeIfAbsent(<span class="number">4L</span>, aLong -&gt; <span class="string">"computeIfAbsent"</span>);</span><br><span class="line"><span class="comment">//有返回值，不做任何操作</span></span><br><span class="line">testMap.computeIfAbsent(<span class="number">3L</span>, aLong -&gt; <span class="string">"computeIfAbsent2"</span>);</span><br><span class="line"><span class="comment">//Map中有就更新，没有不做操作</span></span><br><span class="line">testMap.computeIfPresent(<span class="number">2L</span>, (aLong, s) -&gt; <span class="string">"computeIfPresent"</span>);</span><br><span class="line"><span class="comment">//Map中没有不做操作</span></span><br><span class="line">testMap.computeIfPresent(<span class="number">5L</span>, (aLong, s) -&gt; <span class="string">"computeIfPresent2"</span>);</span><br><span class="line"><span class="comment">//有就更新</span></span><br><span class="line">testMap.compute(<span class="number">1L</span>, (aLong, s) -&gt; <span class="string">"compute"</span>);</span><br><span class="line"><span class="comment">//没有就新增</span></span><br><span class="line">testMap.compute(<span class="number">6L</span>, (aLong, s) -&gt; <span class="string">"compute2"</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyConnect连接后显示未分配虚拟地址</title>
      <link href="/2024/03/15/easyconnect-lian-jie-hou-xian-shi-wei-fen-pei-xu-ni-di-zhi/"/>
      <url>/2024/03/15/easyconnect-lian-jie-hou-xian-shi-wei-fen-pei-xu-ni-di-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="EasyConnect连接后显示未分配虚拟地址"><a href="#EasyConnect连接后显示未分配虚拟地址" class="headerlink" title="EasyConnect连接后显示未分配虚拟地址"></a>EasyConnect连接后显示未分配虚拟地址</h2><h3 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h3><blockquote><p>在做一个公司项目的时间，连上<a href="https://so.csdn.net/so/search?q=vpn&amp;spm=1001.2101.3001.7020">vpn</a>后还是无法访问服务器信息，百度了一下之后才发现vpn的连接状态里显示的是未分配虚拟ip。</p></blockquote><blockquote><p>然后就开始百度解决办法，有说卸载重新装easyconnect的，有说下载easyconnect的修复包的等等吧。但是到最后都没有解决</p></blockquote><h3 id="2、问题截图"><a href="#2、问题截图" class="headerlink" title="2、问题截图"></a>2、问题截图</h3><img src="/2024/03/15/easyconnect-lian-jie-hou-xian-shi-wei-fen-pei-xu-ni-di-zhi/image-20240315133559106.png" class="" title="image-20240315133559106"><blockquote><p>这个时间去设备管理器查看，这个Sangfor SSL异常的情况下应该是带有一个黄色的感叹号的</p></blockquote><img src="/2024/03/15/easyconnect-lian-jie-hou-xian-shi-wei-fen-pei-xu-ni-di-zhi/image-20240315133636873.png" class="" title="image-20240315133636873"><h3 id="3、问题解决"><a href="#3、问题解决" class="headerlink" title="3、问题解决"></a>3、问题解决</h3><blockquote><p>如果显示的有黄色感叹号，右键卸载这个设备，然后启动easyConnect，他会自动把组件下载，回来再看就不带黄色感叹号了。</p></blockquote><img src="/2024/03/15/easyconnect-lian-jie-hou-xian-shi-wei-fen-pei-xu-ni-di-zhi/image-20240315133937107.png" class="" title="image-20240315133937107">]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyConnect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient配置代理</title>
      <link href="/2024/03/14/httpclient-pei-zhi-dai-li/"/>
      <url>/2024/03/14/httpclient-pei-zhi-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="HttpClient配置代理"><a href="#HttpClient配置代理" class="headerlink" title="HttpClient配置代理"></a>HttpClient配置代理</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要访问的网址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">//设置代理的 IP、端口号、协议（替换自己的）</span></span><br><span class="line"><span class="type">HttpHost</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">"自己的代理Ip"</span>,代理的端口号,<span class="string">"http"</span>);</span><br><span class="line"><span class="comment">//设置要访问的HttpHost，即目标站点的HttpHost。  IP、端口号、协议（替换自己的）</span></span><br><span class="line"><span class="type">HttpHost</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">"www.baidu.mn"</span>,<span class="number">80</span>,<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置认证</span></span><br><span class="line"><span class="type">CredentialsProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCredentialsProvider</span>();</span><br><span class="line"><span class="comment">//第一个参数对应代理httpHost，第二个参数设置代理的用户名和密码，如果代理不需要用户名和密码，填空</span></span><br><span class="line">provider.setCredentials(<span class="keyword">new</span> <span class="title class_">AuthScope</span>(proxy), <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(<span class="string">"代理用户名"</span>, <span class="string">"代理密码"</span>));</span><br><span class="line"><span class="comment">//实例化CloseableHttpClient对象</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom().setDefaultCredentialsProvider(provider).build();</span><br><span class="line"><span class="comment">//把代理设置到请求配置里</span></span><br><span class="line"><span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom().setProxy(proxy).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建请求实例</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line"><span class="comment">//将配置设置到请求实例中，如果还有请求头信息，自行设置</span></span><br><span class="line">get.setConfig(requestConfig);</span><br><span class="line"><span class="comment">//发送请求并获得相应</span></span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">res</span> <span class="operator">=</span> httpClient.execute(target,get);</span><br><span class="line"><span class="comment">//获取响应码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> res.getStatusLine().getStatusCode();</span><br><span class="line"><span class="comment">//将响应内容转化为String字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(res.getEntity());</span><br><span class="line"></span><br><span class="line">} <span class="keyword">catch</span> (ClientProtocolException e) {</span><br><span class="line">LOGGER.info(<span class="string">"异常"</span>+e);</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">LOGGER.info(<span class="string">"异常"</span>+e);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient绕过SSL验证</title>
      <link href="/2024/03/14/httpclient-rao-guo-ssl-yan-zheng/"/>
      <url>/2024/03/14/httpclient-rao-guo-ssl-yan-zheng/</url>
      
        <content type="html"><![CDATA[<h2 id="如何绕过SSL验证"><a href="#如何绕过SSL验证" class="headerlink" title="如何绕过SSL验证"></a>如何绕过SSL验证</h2><h3 id="1、在开发中有时间会遇到访问原网站会有提示有风险，需要点击高级继续访问，这个时间使用HttpClient模仿发送请求就需要绕过SSL验证，下面是如何绕过SSL验证"><a href="#1、在开发中有时间会遇到访问原网站会有提示有风险，需要点击高级继续访问，这个时间使用HttpClient模仿发送请求就需要绕过SSL验证，下面是如何绕过SSL验证" class="headerlink" title="1、在开发中有时间会遇到访问原网站会有提示有风险，需要点击高级继续访问，这个时间使用HttpClient模仿发送请求就需要绕过SSL验证，下面是如何绕过SSL验证"></a>1、在开发中有时间会遇到访问原网站会有提示有风险，需要点击高级继续访问，这个时间使用HttpClient模仿发送请求就需要绕过SSL验证，下面是如何绕过SSL验证</h3><ol><li>首先创建一个工具类，将这个createSSLClientDefault()方法复制过去，导入所需要的的jar包</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContextBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myutils</span> {</span><br><span class="line"><span class="comment">//创建HttpClients 绕过ssl验证所需工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CloseableHttpClient <span class="title function_">createSSLClientDefault</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLContextBuilder</span>().loadTrustMaterial(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustStrategy</span>() {</span><br><span class="line"><span class="comment">// 信任所有</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTrusted</span><span class="params">(java.security.cert.X509Certificate[] arg0, String arg1)</span></span><br><span class="line"><span class="keyword">throws</span> java.security.cert.CertificateException {</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}).build();</span><br><span class="line"><span class="type">HostnameVerifier</span> <span class="variable">hostnameVerifier</span> <span class="operator">=</span> NoopHostnameVerifier.INSTANCE;</span><br><span class="line"><span class="type">SSLConnectionSocketFactory</span> <span class="variable">sslsf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslContext, hostnameVerifier);</span><br><span class="line"><span class="keyword">return</span> HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">} <span class="keyword">catch</span> (KeyManagementException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} <span class="keyword">catch</span> (NoSuchAlgorithmException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} <span class="keyword">catch</span> (KeyStoreException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> HttpClients.createDefault();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、接下来就可以去正常的写代码"><a href="#2、接下来就可以去正常的写代码" class="headerlink" title="2、接下来就可以去正常的写代码"></a>2、接下来就可以去正常的写代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用工具类中的方法创建httpClient实例</span></span><br><span class="line"><span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> SSL.createSSLClientDefault();</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送HttpGet请求 模板</span></span><br><span class="line"><span class="comment">//创建HttpClient </span></span><br><span class="line"><span class="type">HttpClient</span>  <span class="variable">httpclient</span> <span class="operator">=</span> createSSLClientDefault();</span><br><span class="line"><span class="comment">//发送接口地址</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">"https://127.0.0.1/postandget/testget?iw-apikey=123&amp;iw-cmd=testget&amp;paramValue=1111"</span>);</span><br><span class="line"><span class="comment">//发送请求并接收response </span></span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">httpresponse</span> <span class="operator">=</span> httpclient.execute(httpget);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(httpresponse.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送httpPost请求 模板</span></span><br><span class="line"><span class="comment">//创建HttpClient </span></span><br><span class="line"><span class="type">HttpClient</span>  <span class="variable">httpclient</span> <span class="operator">=</span> createSSLClientDefault();</span><br><span class="line"><span class="comment">//发送接口地址</span></span><br><span class="line"><span class="type">HttpPost</span> <span class="variable">httppost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">"https://127.0.0.1/postandget/testpost"</span>);</span><br><span class="line"><span class="comment">//设置请求体格式Content-Type</span></span><br><span class="line">httppost.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"><span class="comment">//定义String请求Json参数体</span></span><br><span class="line">httppost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"{\"iw-apikey\":\"123\", \"paramValue1\":\"123\",\"paramValue2\":\"1234\"}"</span>), Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line"><span class="comment">//发送请求并接收response </span></span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">httpresponse</span> <span class="operator">=</span> httpclient.execute(httppost);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(httpresponse.getEntity(), <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="3、这样就可以绕过SSL验证，获取与原网站相同的响应，再去解析"><a href="#3、这样就可以绕过SSL验证，获取与原网站相同的响应，再去解析" class="headerlink" title="3、这样就可以绕过SSL验证，获取与原网站相同的响应，再去解析"></a>3、这样就可以绕过SSL验证，获取与原网站相同的响应，再去解析</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal常用API</title>
      <link href="/2024/03/14/bigdecimal-chang-yong-api/"/>
      <url>/2024/03/14/bigdecimal-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<h2 id="BigDecimal常用API"><a href="#BigDecimal常用API" class="headerlink" title="BigDecimal常用API"></a>BigDecimal常用API</h2><h3 id="1、加法-add"><a href="#1、加法-add" class="headerlink" title="1、加法 add"></a>1、加法 add</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">999</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>);</span><br><span class="line">a = a.add(b);</span><br><span class="line">System.out.println(a.add(b));<span class="comment">//10999</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、减法-subtract"><a href="#2、减法-subtract" class="headerlink" title="2、减法 subtract"></a>2、减法 subtract</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">999</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>);</span><br><span class="line">a = a.subtract(b);</span><br><span class="line">System.out.println(a);<span class="comment">//-9001</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、乘法-multiply"><a href="#3、乘法-multiply" class="headerlink" title="3、乘法 multiply"></a>3、乘法 multiply</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">999</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> a.multiply(b);</span><br><span class="line">System.out.println(<span class="string">"a*b="</span> + c);</span><br></pre></td></tr></tbody></table></figure><h3 id="4、除法-divide"><a href="#4、除法-divide" class="headerlink" title="4、除法 divide"></a>4、除法 divide</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">999</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>);</span><br><span class="line">c = a.divide(b);</span><br><span class="line">System.out.println(<span class="string">"a/b="</span> + c);</span><br></pre></td></tr></tbody></table></figure><h3 id="5、求余-divideAndRemainder"><a href="#5、求余-divideAndRemainder" class="headerlink" title="5、求余 divideAndRemainder"></a>5、求余 divideAndRemainder</h3><blockquote><p>divideAndRemainder方法会返回一个长度为2的BigDecimal数组，第一个为商，第二个为余数</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">999</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>);</span><br><span class="line">BigDecimal[] c = a.divideAndRemainder(b);</span><br><span class="line">System.out.println(<span class="string">"a/b="</span> + c[<span class="number">0</span>] + <span class="string">"余数"</span> + c[<span class="number">1</span>]);</span><br></pre></td></tr></tbody></table></figure><h3 id="6、比较大小-compareTo"><a href="#6、比较大小-compareTo" class="headerlink" title="6、比较大小 compareTo"></a>6、比较大小 compareTo</h3><p>BigDecimal可以通过compareTo方法来进行比较。<br>返回的结果是int类型，-1表示小于，0是等于，1是大于。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">999</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a.compareTo(b) &gt; <span class="number">0</span>) {</span><br><span class="line">    System.out.println(<span class="string">"a大于b"</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (a.compareTo(b) == <span class="number">0</span>) {</span><br><span class="line">    System.out.println(<span class="string">"a等于b"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    System.out.println(<span class="string">"a小于b"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7、处理小数"><a href="#7、处理小数" class="headerlink" title="7、处理小数"></a>7、处理小数</h3><blockquote><p>下面是取舍模式</p></blockquote><ul><li><p>==ROUND_UP==  ： 对于正数来说是舍弃小数后，加一，对于负数来说，舍弃小数后减一。例如：100.4，取整数为101，-100.5，取整数为-101</p></li><li><p>==ROUND_DOWN==  ： 直接舍弃小数或者说精确位后的小数</p></li><li><p>==ROUND_CEILING== : 如果 BigDecimal 是正的，则做 ROUND_UP 操作；如果为负，则做 ROUND_DOWN 操作 （取附近较大的整数）。</p></li><li><p>==ROUND_FLOOR== ： 如果 BigDecimal 是正的，则做 ROUND_DOWN 操作；如果为负，则做 ROUND_UP  操作 （取附近较小的整数）。</p></li><li><p>==ROUND_HALF_UP== ： 四舍五入，0.5向上取整 100.5 -&gt; 101</p></li><li><p>==ROUND_HALF_DOWN== ： 四舍五入，0.5向下取整 100.5 -&gt; 100</p></li><li><p>==ROUND_UNNECESSARY== ： 如果存在小数位，就抛ArithmeticException 异常。</p></li></ul><p>单独设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">"998.5"</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">up</span> <span class="operator">=</span> a.setScale(<span class="number">0</span>, RoundingMode.UP);</span><br><span class="line">System.out.println( <span class="string">"up ======= "</span> + up);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">down</span> <span class="operator">=</span> a.setScale(<span class="number">0</span>, RoundingMode.DOWN);</span><br><span class="line">System.out.println( <span class="string">"down ======= "</span> + down);</span><br><span class="line"><span class="comment">//取最近的较大整数</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">ceiling</span> <span class="operator">=</span> a.setScale(<span class="number">0</span>, RoundingMode.CEILING);</span><br><span class="line">System.out.println( <span class="string">"ceiling ======= "</span> + ceiling);</span><br><span class="line"><span class="comment">//取最近的较小整数</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">floor</span> <span class="operator">=</span> a.setScale(<span class="number">0</span>, RoundingMode.FLOOR);</span><br><span class="line">System.out.println( <span class="string">"floor ======= "</span> + floor);</span><br><span class="line"><span class="comment">//四舍五入，0.5向上取整</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">halfUp</span> <span class="operator">=</span> a.setScale(<span class="number">0</span>, RoundingMode.HALF_UP);</span><br><span class="line">System.out.println( <span class="string">"halfUp ======= "</span> + halfUp);</span><br><span class="line"><span class="comment">//四舍五入，0.5向下取整</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">halfDown</span> <span class="operator">=</span> a.setScale(<span class="number">0</span>, RoundingMode.HALF_DOWN);</span><br><span class="line">System.out.println( <span class="string">"halfDown ======= "</span> + halfDown);</span><br></pre></td></tr></tbody></table></figure><p>除法运用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果保留两位小数</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">divide</span> <span class="operator">=</span> a.divide(b, <span class="number">2</span>, RoundingMode.UP);</span><br><span class="line">System.out.println(divide);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 计算 BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除特殊的空格</title>
      <link href="/2024/03/14/qu-chu-te-shu-de-kong-ge/"/>
      <url>/2024/03/14/qu-chu-te-shu-de-kong-ge/</url>
      
        <content type="html"><![CDATA[<h2 id="去除特殊的空格"><a href="#去除特殊的空格" class="headerlink" title="去除特殊的空格"></a>去除特殊的空格</h2><blockquote><p>一般是爬虫的时间会遇到这些奇怪的情况</p></blockquote><h3 id="1、去除字符串首尾的普通空格"><a href="#1、去除字符串首尾的普通空格" class="headerlink" title="1、去除字符串首尾的普通空格"></a>1、去除字符串首尾的普通空格</h3><p>字符串可以使用 .trim()方法去除首尾的空格，但是无法去除中间的空格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">" ashjs klkl     "</span>;</span><br><span class="line">System.out.println(a.trim());</span><br></pre></td></tr></tbody></table></figure><h3 id="2、去除字符串中的制表符"><a href="#2、去除字符串中的制表符" class="headerlink" title="2、去除字符串中的制表符"></a>2、去除字符串中的制表符</h3><p>这种情况一般是前端的数据之类的，使用node解析后获得的字符串，会将前端的换行、退格等转义成对应的转义字符。如： \t \n \r \s等</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  有的操作系统\r\n连用表示是换行，有的是只需要\n就可以表示</span></span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">"a\r\nbs\tvvvv"</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line">b = b.replaceAll(<span class="string">"\n|\r|\t|\\s"</span>,<span class="string">""</span>);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></tbody></table></figure><img src="/2024/03/14/qu-chu-te-shu-de-kong-ge/image-20240314114654784.png" class="" title="image-20240314114654784"><h3 id="3、去除特殊的空格"><a href="#3、去除特殊的空格" class="headerlink" title="3、去除特殊的空格"></a>3、去除特殊的空格</h3><p>有的前端的&amp;nbsp; 我们使用node解析后获取的字符串会自动转空格，但是不论是使用trim()方法还是替换转义字符都去不掉这个空格。</p><img src="/2024/03/14/qu-chu-te-shu-de-kong-ge/image-20240314112538807-1710485332761-1.png" class="" title="image-20240314112538807"><p>去除</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = b.replaceAll(<span class="string">"\\u00a0"</span>, <span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure><p>常见的前端空格对应的Unicode码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nbsp   对应   \u00a0</span><br><span class="line">emsp   对应  \u2003</span><br><span class="line">ensp   对应  \u2002</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
